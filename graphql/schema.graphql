"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"QUERIES"
type Query {
  "Find a single user by an identifying attribute."
  user(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

    email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
  ): User @find

  "List multiple users."
  users(
    name: String @where(operator: "like")
  ): [User!]! @all

  vehicle(
    id: ID @eq @rules(apply: ["exists:vehicles,id"])
  ): Vehicle @find

  vehicles(
    name: String @where(operator: "like")
  ): [Vehicle!]! @all

  park(
    id: ID @eq @rules(apply: ["exists:parks,id"])
  ): Park @find

  parks(
    name: String @where(operator: "like")
  ): [Park!]! @all

  brands(
    name: String @where(operator: "like")
  ): [Brand!]! @all
}

input CreateVehicleWithParkInput {
  name: String!
  park_name: String!
}

input CreateParkInput {
  name: String!
}

"MUTATIONS"
type Mutation {
  createVehicleWithPark(
    input: CreateVehicleWithParkInput! @spread
  ): Vehicle!

  createPark(
    input: CreateParkInput! @spread
  ): Park! @create
}

"TYPES"
type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

type Vehicle {
  id: ID!
  name: String!
  park: Park @belongsTo
}

type Park {
  id: ID!
  name: String!
  vehicles: [Vehicle!]! @hasMany
  brand: Brand @belongsTo
}

type Brand {
  id: ID!
  name: String!
  parks: [Park!]! @hasMany
}